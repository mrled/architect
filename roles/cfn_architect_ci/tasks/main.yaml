---

- block:

  - name: Save SSH client private key
    copy:
      content: "{{ architect_ssh_client_ecdsa_key_b64 | b64decode }}"
      dest: "{{ client_ssh_private_key_path }}"

  - name: Get SSH client public ECDSA key
    command: ssh-keygen -y -f "{{ client_ssh_private_key_path }}"
    register: ssh_client_public_ecdsa_key_result
    changed_when: false

  - name: Save SSH client public ECDSA key
    copy:
      content: "{{ ssh_client_public_ecdsa_key_result.stdout }}"
      dest: "{{ client_ssh_public_key_path }}"

- name: Destroy old Architect CI stack
  cloudformation:
    stack_name: "{{ architect_ci_stack_name }}"
    state: "absent"
  when: remove_existing_architect_ci_stack | bool == true

- block:

  - name: Deploy the Architect CI template
    cloudformation:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      stack_name: "{{ architect_ci_stack_name }}"
      state: "present"
      disable_rollback: true
      region: "{{ aws_region }}"
      template: "{{ role_path }}/files/architect.ci.cfn.yaml"
      template_parameters:
        ArchitectUserName: "{{ architect_user }}"
        SshClientPublicKey: "{{ lookup('file', client_ssh_public_key_path) }}"
        JenkinsDataVolumeDevice: "{{ architect_docker_volume_device }}"
        DeployBucketName: "{{ deploy_bucket.name }}"
        DeployBucketArn: "{{ deploy_bucket.arn }}"
      tags:
        Environment: Architect
    register: architect_ci_stack_result
    when: skip_architect_ci_stack | bool == false

  rescue:
  - debug: var=architect_ci_stack_result
  - fail:
      msg: Architect CI deployment has failed :(

- name: Read Architect CI stack output
  cloudformation_facts:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    stack_name: "{{ architect_ci_stack_name }}"
    region: "{{ aws_region }}"

- debug:
    var: cloudformation.{{ architect_ci_stack_name }}.stack_outputs

- set_fact:
    architect_ip_address: "{{ cloudformation[architect_ci_stack_name].stack_outputs.ArchitectIpAddress }}"

- name: Retrieve SSH known_hosts_architect_tmp
  aws_s3:
    bucket: "{{ deploy_bucket.name }}"
    mode: get
    overwrite: different
    object: "{{ architect_ci_stack_name }}/known_hosts_localhost"
    dest: "{{ workdir }}/known_hosts_architect_tmp"

- name: Replace localhost with Architect IP address in known_hosts_architect_tmp
  replace:
    path: "{{ workdir }}/known_hosts_architect_tmp"
    regexp: "^localhost(.*)"
    replace: '{{ architect_ip_address }}\1'

- name: Ensure each line of known_hosts_architect_tmp exists in known_hosts_file
  lineinfile:
    path: "{{ known_hosts_file }}"
    line: "{{ item }}"
  with_lines: "cat {{ workdir }}/known_hosts_architect_tmp"

- set_fact:
    ssh_cmd: >-
      ssh -t
      -o UserKnownHostsFile={{ known_hosts_file }}
      -i {{ playbook_dir }}/{{ client_ssh_private_key_path }}
      {{ architect_user }}@{{ architect_ip_address }}

- name: Write SSH connection script
  copy:
    content: |+
      #!/bin/sh
      set -eu
      {{ ssh_cmd }} "$@"
    dest: "{{ ssh_script_path }}"
    mode: 0700

- name: Success!
  debug:
    msg: |+
      Connecting to Architect, for debugging
      IP address              {{ architect_ip_address }}
      SSH script              {{ ssh_script_path }}
      SSH script usage        {{ ssh_script_path }} sudo docker stack ls
