AWSTemplateFormatVersion: 2010-09-09
Description: Architect CI stack

Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  ArchitectUserName:
    Description: The name of the admin user, who will have passwordless sudo rights
    Type: String
  SshClientPublicKey:
    Description: An SSH client public key
    Type: String
    Default: ""
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  Ec2InstanceArch:
    Default: HVM64
    Type: String
  Ec2InstanceNatArch:
    Default: NATHVM64
    Type: String
  Ec2InstanceProfileName:
    Description: Name of an instance profile to assign to the Architect EC2 instance. This profile should have permission to read from the KMS passed as KmsId.
    Type: String
  Ec2DebianStretchAmi:
    Default: ami-4d183328  # Debian Stretch in us-east-2
    Type: String
  VpcCidrBlock:
    Default: 10.0.0.0/16
    Type: String
  VpcSubnetBlock:
    Default: 10.0.0.0/24
    Type: String
  KmsId:
    Description: The ID of the KMS to use to descrypt the VPN PKCS12 key and certificate
    Type: String
  SshHostEcdsaKeyEncrypted:
    Description: An ECDSA SSH host private key, as generated by ssh-keygen, encrypted by the KMS
    Type: String
  JenkinsDataVolumeDevice:
    Description: The device name for the Jenkins data volume, such as "xvdj"
    Type: String

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref VpcSubnetBlock
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  Route:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  NetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
  OutBoundNetworkTcpAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  OutBoundNetworkUdpAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '101'
      Protocol: '17'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  InboundNetworkTcpAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  InboundNetworkUdpAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '103'
      Protocol: '17'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  InboundNetworkIcmpAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '104'
      Protocol: '1'
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: -1
        Type: -1
  OutboundNetworkIcmpAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: '104'
      Protocol: '1'
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: -1
        Type: -1

  SubnetNetworkAclAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref NetworkAcl
  IPAddress:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId: !Ref ArchitectInstance

  ArchitectInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Architect instance security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      SecurityGroupEgress:
        - Description: HTTP
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - Description: HTTPS
          IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - Description: DNS
          IpProtocol: udp
          FromPort: '53'
          ToPort: '53'
          CidrIp: 0.0.0.0/0
        - Description: IPSEC
          IpProtocol: udp
          FromPort: '500'
          ToPort: '500'
          CidrIp: 0.0.0.0/0
        - Description: IPSEC
          IpProtocol: udp
          FromPort: '4500'
          ToPort: '4500'
          CidrIp: 0.0.0.0/0
        - Description: Ping lol
          IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0

  ArchitectInstance:
    Type: 'AWS::EC2::Instance'
    DependsOn: AttachGateway
    Metadata:
      'AWS::CloudFormation::Init':

        configSets:
          default:
            - configSwap
            - configAwsCli
            - configSshHostKeys
            - configArchitectUser
            # - configDebugging
            - configDhcp

        configSwap:
          files:
            /usr/local/bin/setup-temp-storage.sh:
              content: !Join
                - "\n"
                - - |
                    #!/bin/sh
                    set -eu
                    device=/dev/xvds
                    mkswap "$device"
                    swapon "$device"
                    echo "$device none swap defaults 0 0" >> /etc/fstab
              mode: '000755'
              owner: root
              group: root
          commands:
            mkswap:
              command: /usr/local/bin/setup-temp-storage.sh
              ignoreErrors: true

        configDebugging:
          packages:
            apt:
              dnsutils: []

        configAwsCli:
          packages:
            apt:
              python-pip: []
          files:
            /usr/local/bin/architect-kms-decrypt.sh:
              # NOTE: use of the `aws` command requires that the EC2 instance have a profile with an IAM role
              #       as well as the AWS_DEFAULT_REGION environment variable to be set
              content:
                !Sub |
                  #!/bin/sh
                  export AWS_DEFAULT_REGION="${AWS::Region}"
                  set -eu
                  if test $# -ne 1; then
                    echo "Wrong number of arguments"
                    exit 1
                  fi
                  umask 0077
                  path_enc_b64="$1"
                  path_enc="$path_enc_b64.decoded"
                  # Reminder: results of 'aws kms encrypt' are base64 encoded
                  base64 -d < "$path_enc_b64" > "$path_enc"
                  aws kms decrypt --ciphertext-blob "fileb://$path_enc" --query Plaintext --output text
                  rm "$path_enc_b64"
              mode: '000755'
              owner: root
              group: root
          commands:
            install-aws-cli:
              command: pip install awscli --upgrade --user
              ignoreErrors: false

        configSshHostKeys:
          files:
            /etc/ssh/ssh_host_ecdsa_key.kmsencrypted:
              content: !Ref SshHostEcdsaKeyEncrypted
              mode: '000400'
              owner: root
              group: root
            /usr/local/bin/configure-ssh-host-keys.sh:
              content:
                !Sub |
                  #!/bin/sh
                  set -eu
                  umask 077
                  rm /etc/ssh/ssh_host_*_key /etc/ssh/ssh_host_*_key.pub
                  setup_key() {
                    key="$1"
                    architect-kms-decrypt.sh "$key.kmsencrypted" | base64 -d > "$key"
                    ssh-keygen -y -f "$key" > "$key.pub"
                    chmod 644 "$key.pub"
                  }
                  setup_key /etc/ssh/ssh_host_ecdsa_key
              mode: '000755'
              owner: root
              group: root
          commands:
            configure-ssh-host-keys:
              command: /usr/local/bin/configure-ssh-host-keys.sh

        configArchitectUser:
          groups:
            basicallyroot: {}
          files:
            /usr/local/bin/configure-architect-user.sh:
              content:
                !Sub |
                  #!/bin/sh
                  set -eu
                  umask 077
                  usrname="${ArchitectUserName}"
                  usrhome="/home/$usrname"
                  useradd --home-dir "$usrhome" --groups sudo,basicallyroot --create-home --shell /bin/bash --user-group "$usrname"
                  mkdir -p "$usrhome/.ssh"
                  echo "${SshClientPublicKey}" > "$usrhome/.ssh/authorized_keys"
                  chown "$usrname:$usrname" "$usrhome" "$usrhome/.ssh" "$usrhome/.ssh/authorized_keys"
              mode: "000755"
              owner: "root"
              group: "root"
            /etc/sudoers.d/basicallyroot:
              content: "%basicallyroot   ALL=NOPASSWD: ALL"
              mode: "000400"
              owner: "root"
              group: "root"
          commands:
            configure-architect-user:
              command: /usr/local/bin/configure-architect-user.sh

        configDhcp:
          # By default, EC2 instances pull DNS servers from DHCP
          # This means on each DHCP update, /etc/resolv.conf gets overwritten
          # We want to use the DNS server we get from strongswan,
          # so remove the options requesting DNS server, hostname, etc
          # The original file contents were:
          #     option rfc3442-classless-static-routes code 121 = array of unsigned integer 8;
          #     send host-name = gethostname();
          #     request subnet-mask, broadcast-address, time-offset, routers,
          #             domain-name, domain-name-servers, domain-search, host-name,
          #             dhcp6.name-servers, dhcp6.domain-search, dhcp6.fqdn, dhcp6.sntp-servers,
          #             netbios-name-servers, netbios-scope, interface-mtu,
          #             rfc3442-classless-static-routes, ntp-servers;
          files:
            /etc/dhcp/dhclient.conf:
              content: !Join
                - "\n"
                - - |
                    option rfc3442-classless-static-routes code 121 = array of unsigned integer 8;
                    send host-name = gethostname();
                    request subnet-mask, broadcast-address, time-offset, routers,
                            dhcp6.sntp-servers, interface-mtu,
                            rfc3442-classless-static-routes, ntp-servers;
              mode: '000644'
              owner: root
              group: root
          commands:
            restart-networking:
              command: systemctl restart networking

    Properties:
      ImageId: !Ref Ec2DebianStretchAmi
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref Ec2InstanceProfileName
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: Architect
      NetworkInterfaces:
        - GroupSet:
            - !Ref ArchitectInstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref Subnet

      BlockDeviceMappings:
        # See also the AWS::EC2::Volume resource(s) defined here
        # I define disks that are deleted on termination here as part of the EC2 instance,
        # but disks that do not delete on termination are defined as their own resources.

        # Increase root filesystem size (not adding another disk)
        # (Hopefully will prevent disk exhaustion in rare cases, see also [highload])
        - DeviceName: "xvda"
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 16
            VolumeType: gp2

        # This is ONLY FOR SWAP STORAGE - it's deleted on termination
        # (Hopefully will prevent disk exhaustion in rare cases, see also [highload])
        - DeviceName: /dev/xvds
          Ebs:
            DeleteOnTermination: true
            VolumeSize: "2"

      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            # Don't 'set -e' so that cfn-signal always gets called
            set -u
            # Set config values. These are replaced at deployment time by CloudFormation.
            stackname="${AWS::StackName}"
            region="${AWS::Region}"
            # Install AWS CFN Bootstrap scripts
            apt-get update
            apt-get -uy install python-setuptools
            easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            # Bootstrap CFN
            cfn-init --verbose --stack "$stackname" --resource ArchitectInstance --region "$region"
            cfn-signal --exit-code $? --stack "$stackname" --resource ArchitectInstance --region "$region"

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M

  ArchitectJenkinsDataDisk:
    Type: AWS::EC2::Volume
    Properties:
      Size: 8
      AvailabilityZone: !GetAtt
        - ArchitectInstance
        - AvailabilityZone
      VolumeType: gp2
  ArchitectJenkinsDataDiskAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref ArchitectInstance
      VolumeId: !Ref ArchitectJenkinsDataDisk
      Device: !Ref JenkinsDataVolumeDevice

Outputs:
  ArchitectIpAddress:
    Value: !GetAtt
      - ArchitectInstance
      - PublicIp
    Description: Architect IP address
  ArchitectInstanceId:
    Value: !Ref ArchitectInstance

# Footnotes
# [highload]:
#   Once, the load got super high (150+), some swap and fs journaling processes consumed all CPU,
#   and the VPN keepalive ping processes supposed to be run for 10 pings (10 sec) every 5 minutes
#   couldn't finish so dozens were present at once
