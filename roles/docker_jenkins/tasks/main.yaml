---

- block:

  - name: Get docker GID
    getent:
      database: group
      key: docker

  - name: Set docker_gid
    set_fact:
      docker_gid: "{{ getent_group.docker[1] }}"

  - name: Show docker_gid
    debug:
      msg: "docker GID: {{ docker_gid }}"

  - name: Create docker_jenkins configuration directory
    file:
      path: "{{ architect_jenkins_swarm_config_dir }}"
      state: directory
      owner: root
      group: root
      mode: 0700

  - name: Save inflatable-wharf secrets file
    copy:
      content: |
        AWS_ACCESS_KEY_ID={{ inflwharf_aws_access_key }}
        AWS_SECRET_ACCESS_KEY={{ inflwharf_aws_secret_key }}
      dest: "{{ architect_jenkins_swarm_inflwharf_secrets_file }}"
      owner: root
      group: root
      mode: 0600

  - name: Get MD5 hash for inflatable-wharf secrets file
    stat:
      path: "{{ architect_jenkins_swarm_inflwharf_secrets_file }}"
    register: inflwharf_secrets_stat_result

  - name: Set inflwharf_secrets_hash
    set_fact:
      inflwharf_secrets_hash: "{{ inflwharf_secrets_stat_result.stat.md5 }}"

  - name: Show inflwharf_secrets_hash
    debug:
      var: inflwharf_secrets_hash

  - name: Save the Docker compose file
    template:
      src: jenkins.compose.yaml.j2
      dest: "{{ architect_jenkins_swarm_compose_file }}"
      owner: root
      mode: 0600

  - name: Deploy the Docker stack
    command: >
      docker stack deploy
      --compose-file {{ architect_jenkins_swarm_compose_file }}
      {{ architect_jenkins_swarm_stack_name }}
    environment:
      ACME_SECRETS_ENV_FILE_HASH: "{{ inflwharf_secrets_hash }}"

  - name: Get inflatable-wharf container ID in a short loop, because it doesn't seem to come up immediately
    command: >
      docker ps
      --quiet
      --filter "name={{ architect_jenkins_swarm_stack_name }}_inflatable-wharf.*"
    register: inflwharf_container_result
    until: inflwharf_container_result.stdout != ""
    delay: 5    # Wait 5 seconds between each attempt
    retries: 3  # Retry 3 times, waiting for a max wait time of 15 seconds

  - name: Show the container result
    debug: var=inflwharf_container_result

  - name: Print successful deployment message
    debug:
      msg: |
        The docker stack has been deployed!

        The stack includes the architect-jenkins service, and also an
        inflatable-wharf service that handles certificate renewal via the lego
        Let's Encrypt client.

        If this is the first time this stack has been deployed, then
        JENKINS WILL NOT BE AVAILBLE until inflatable-wharf has received the
        signed certificate from Let's Encrypt.

        Depending on your DNS provider, this may take from a few minutes up to
        half an hour.

        For more information on how `inflatable-wharf` works, including
        troubleshooting steps and how to view logs, see
        <https://github.com/mrled/inflatable-wharf>

  - name: Print inflatable-wharf loop message
    debug:
      msg: |
        We will now loop until the certs are generated.
        We will loop for up to **30 minutes**, because some DNS providers can
        be that slow.

        If we time out (or you get bored),
        cancel this and check for yourself whether the cert exists with

            {{ ssh_script_path }} sudo {{ inflwharf_cert_check_cmd }}

        and check whether the '{{ inflwharf_domain_name }}.crt' file exists

  - name: Loop, checking for signed certs from Let's Encrypt
    shell: "{{ inflwharf_cert_check_cmd }} 2>/dev/null"
    register: inflwharf_cert_result
    # Note that ls errors are printed to stderr,
    # so even if an error message contains the filename we're looking for,
    # the loop will still properly fail.
    until: inflwharf_cert_result.stdout.find(inflwharf_domain_name) != -1
    delay: 30    # Wait 30 seconds between each attempt
    retries: 60  # Retry 60 times, waiting for a max wait time of 30 minutes

  - name: Print inflatable-wharf successful loop message
    debug:
      msg: |
        Certificates exist! ls result
        {{ inflwharf_cert_result.stdout }}

  - name: Print architect-jenkins loop message
    debug:
      msg: |
        We will now loop until Jenkins comes up successfully
        We will only wait for a few minutes; if Jenkins doesn't start
        successfully by then, investigate whether the health check is working.

        If this times out, you can check for a healthy Jenkins container using

            {{ ssh_script_path }} sudo {{ archjenkins_healthcheck_cmd }}

        and check that the architect-jenkins container is started and healthy.

  - name: Loop, waiting for healthy Jenkins container
    shell: "{{ archjenkins_healthcheck_cmd }} --quiet"
    register: archjenks_health_result
    until: archjenks_health_result.stdout | length == 12
    delay: 15    # Wait 15 seconds between each attempt
    retries: 8   # Retry 8 times, waiting for a max wait time of 2 minutes

  - name: Set container ID facts
    set_fact:
      archjenks_container_id: "{{ archjenks_health_result.stdout }}"
      inflwharf_container_id: "{{ inflwharf_container_result.stdout }}"

  - name: Print architect-jenkins successful loop message
    debug:
      msg: |+
        The Jenkins container is healthy! Container ID = '{{ archjenks_container_id }}'

        If you haven't logged in to this Jenkins server yet, your first login must be with the initial admin password.
        To see this password, run

            {{ ssh_script_path }} sudo docker exec {{ archjenks_container_id }} cat /var/jenkins_home/secrets/initialAdminPassword

        We generated a cert for this domain, so ensure DNS and networking allows Architect to be reached at

            https://{{ inflwharf_domain_name }}/

        If you need to force a certificate renewal before inflatable-wharf detects that you need one -
        perhaps because you were using the staging Let's Encrypt server and now want to switch to production -
        you will have to restart the inflatable-wharf container and then delete the cert, in that order.

        To restart the inflatable-wharf container

            {{ ssh_script_path }} sudo docker restart {{ inflwharf_container_id }}

        This will generate a new container ID for the inflatable-wharf container; get that ID with

            {{ ssh_script_path }} sudo docker ps --quiet --filter "name={{ architect_jenkins_swarm_stack_name }}_inflatable-wharf.*"

        To delete the certificate

            {{ ssh_script_path }} sudo docker exec <NEW CONTAINER ID> rm /srv/inflatable-wharf/certificates/{{ inflwharf_domain_name }}.crt

        You can view certificate details with

            {{ ssh_script_path }} sudo docker exec <NEW CONTAINER ID> openssl x509 -in /srv/inflatable-wharf/certificates/{{ inflwharf_domain_name }}.crt -noout -text

        Then check the logs to know when the cert gets generated

            {{ ssh_script_path }} sudo docker logs <NEW CONTAINER ID>

        And finally restart the Jenkins container (this will generate a NEW container ID!)

            {{ ssh_script_path }} sudo docker restart <NEW CONTAINER ID>

  when: skip_architect_deploy_jenkins_swarm | bool == false
