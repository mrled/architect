---

- block:

  - name: Get docker GID
    getent:
      database: group
      key: docker
  - set_fact:
      docker_gid: "{{ getent_group.docker[1] }}"
  - debug:
      msg: "docker GID: {{ docker_gid }}"

  - name: Create docker_jenkins configuration directory
    file:
      path: "{{ architect_jenkins_swarm_config_dir }}"
      state: directory
      owner: root
      group: root
      mode: 0700

  - name: Save inflatable-wharf secrets file
    copy:
      content: |
        AWS_ACCESS_KEY_ID={{ inflwharf_aws_access_key }}
        AWS_SECRET_ACCESS_KEY={{ inflwharf_aws_secret_key }}
        AWS_REGION={{ inflwharf_aws_region }}
        AWS_HOSTED_ZONE_ID={{ inflwharf_aws_hosted_zone_id }}
      dest: "{{ architect_jenkins_swarm_inflwharf_secrets_file }}"
      owner: root
      mode: 0600

  - name: Get MD5 hash for inflatable-wharf secrets file
    stat:
      path: "{{ architect_jenkins_swarm_inflwharf_secrets_file }}"
    register: inflwharf_secrets_stat_result
  - name: Set inflwharf_secrets_hash fact
    set_fact:
      inflwharf_secrets_hash: "{{ inflwharf_secrets_stat_result.stat.md5 }}"
  - name: Show inflwharf_secrets_hash
    debug:
      var: inflwharf_secrets_hash

  - name: Save the Docker compose file
    template:
      src: jenkins.compose.yaml.j2
      dest: "{{ architect_jenkins_swarm_compose_file }}"
      owner: root
      mode: 0600

  - name: Deploy the Docker stack
    command: >
      docker stack deploy
      --compose-file {{ architect_jenkins_swarm_compose_file }}
      {{ architect_jenkins_swarm_stack_name }}
    environment:
      ACME_SERETS_ENV_FILE_HASH: "{{ inflwharf_secrets_hash }}"

  - name: Get inflatable-wharf container ID
    command: >
      docker ps
      --quiet
      --filter "name={{ architect_jenkins_swarm_stack_name }}_inflatable-wharf.*"
    register: inflwharf_container_result

  - name: Print successful deployment message
    vars:
      message: |
        The docker stack has been deployed!

        The stack includes the architect-jenkins service, and also an
        inflatable-wharf service that handles certificate renewal via the lego
        Let's Encrypt client.

        If this is the first time this stack has been deployed, then
        JENKINS WILL NOT BE AVAILBLE until inflatable-wharf has received the
        signed certificate from Let's Encrypt.

        Depending on your DNS provider, this may take from a few minutes up to
        half an hour.

        For more information on how `inflatable-wharf` works, including
        troubleshooting steps and how to view logs, see
        <https://github.com/mrled/inflatable-wharf>
    debug:
      msg: "{{ message.split('\n') }}"

  - name: Print loop message
    vars:
      testcmd: >
        {{ ssh_script_path }}
        sudo docker exec
        {{ inflwharf_container_result.stdout }}
        ls '/srv/inflatable-wharf/certificates'
      message: |
        We will now loop until the certs are generated.
        We will loop for up to **30 minutes**, because some DNS providers can
        be that slow.

        If we time out (or you get bored),
        cancel this and check for yourself whether the cert exists with
            {{ testcmd }}
        and check whether the "{{ inflwharf_domain_name }}.crt file exists"
    debug:
      msg: "{{ message.split('\n') }}"
  - name: Loop, checking for signed certs from Let's Encrypt
    shell: >
      docker exec
      {{ inflwharf_container_result.stdout }}
      ls "/srv/inflatable-wharf/certificates/{{ inflwharf_domain_name }}.crt"
      2>/dev/null
    register: inflwharf_cert_result
    # Note that ls errors are printed to stderr,
    # so even if an error message contains the filename we're looking for,
    # the loop will still properly fail.
    until: inflwharf_cert_result.stdout.find(inflwharf_domain_name) != -1
    delay: 30    # Wait 30 seconds between each attempt
    retries: 60  # Retry 60 times, waiting for a total of 30 minutes

  - name: Print successful certificate message
    debug:
      msg: Certificates exist!

  when: skip_architect_deploy_jenkins_swarm | bool == false
