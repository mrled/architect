---

- block:

  - name: Get docker GID
    getent:
      database: group
      key: docker
  - set_fact:
      docker_gid: "{{ getent_group.docker[1] }}"
  - debug:
      msg: "docker GID: {{ docker_gid }}"

  - name: Create docker_jenkins configuration directory
    file:
      path: "{{ architect_jenkins_swarm_config_dir }}"
      state: directory
      owner: root
      group: root
      mode: 0700

  - name: Save inflatable-wharf secrets file
    copy:
      content: |
        AWS_ACCESS_KEY_ID={{ inflwharf_aws_access_key }}
        AWS_SECRET_ACCESS_KEY={{ inflwharf_aws_secret_key }}
        AWS_REGION={{ inflwharf_aws_region }}
        AWS_HOSTED_ZONE_ID={{ inflwharf_aws_hosted_zone_id }}
      dest: "{{ architect_jenkins_swarm_inflwharf_secrets_file }}"
      owner: root
      mode: 0600

  - name: Get MD5 hash for inflatable-wharf secrets file
    shell: md5sum "{{ architect_jenkins_swarm_inflwharf_secrets_file }}" | cut -d ' ' -f 1
    register: inflwharf_secrets_hash_result
  - name: Set inflwharf_secrets_hash fact
    set_fact:
      inflwharf_secrets_hash: "{{ inflwharf_secrets_hash_result.stdout }}"
  - name: Show inflwharf_secrets_hash
    debug:
      var: inflwharf_secrets_hash

  - name: Save the Docker compose file
    template:
      src: jenkins.compose.yaml.j2
      dest: "{{ architect_jenkins_swarm_compose_file }}"
      owner: root
      mode: 0600

  - name: Deploy the Docker service
    command: >
      docker stack deploy
      --compose-file {{ architect_jenkins_swarm_compose_file }}
      {{ architect_jenkins_swarm_service_name }}
    environment:
      ACME_SERETS_ENV_FILE_HASH: "{{ inflwharf_secrets_hash }}"

  - name: Print successful deployment message
    vars:
      message: |
        The docker service has been deployed!

        The service includes an official jenkins image, and also an
        inflatable-wharf image that handles certificate renewal via the lego
        Let's Encrypt client.

        If this is the first time this service has been deployed, then
        JENKINS WILL NOT BE AVAILBLE until inflatable-wharf has received the
        signed certificate from Let's Encrypt.

        Depending on your DNS provider, this may take from a few minutes up to
        half an hour.

        For more information on how `inflatable-wharf` works, including
        troubleshooting steps and how to view logs, see
        <https://github.com/mrled/inflatable-wharf>
    debug:
      msg: "{{ message.split('\n') }}"

  when: skip_architect_deploy_jenkins_swarm | bool == false
